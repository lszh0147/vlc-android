apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
android {
    packagingOptions {
//        exclude 'META-INF/main.kotlin_module'
//        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
//        pickFirst 'lib/armeabi/libc++_shared.so'
//        pickFirst 'lib/arm64-v8a/libc++_shared.so'
//        pickFirst 'lib/x86/libc++_shared.so'
//        pickFirst 'lib/x86_64/libc++_shared.so'
        exclude 'META-INF/main.kotlin_module'
        exclude 'lib/armeabi-v7a/libc++_shared.so'
        exclude 'lib/armeabi/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        exclude 'lib/x86/libc++_shared.so'
        exclude 'lib/x86_64/libc++_shared.so'
    }

    dexOptions {
        maxProcessCount 8
        javaMaxHeapSize "4g"
        preDexLibraries true
    }

    dataBinding {
        enabled = true
    }

    compileSdkVersion rootProject.ext.compileSdkVersion

    flavorDimensions "abi"

    lintOptions {
        abortOnError false
        disable 'MissingTranslation', 'ExtraTranslation'
    }


    defaultConfig {
        applicationId rootProject.ext.appId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            /*
            To set this properties, create file gradle.properties with these 3 props.
            e.g.
            keyStoreFile=/home/<username>/.android/debug.keystore
            storealias=androiddebugkey
            storepwd=android
             */

//            if (project.hasProperty('keyStoreFile')) {
//                storeFile file(project.findProperty('keyStoreFile'))
//                keyAlias project.findProperty('storealias')
//                if (System.getenv('PASSWORD_KEYSTORE') != null && !System.getenv('PASSWORD_KEYSTORE').isEmpty()) {
//                    storePassword = System.getenv('PASSWORD_KEYSTORE')
//                    keyPassword = System.getenv('PASSWORD_KEYSTORE')
//                } else {
//                    storePassword project.findProperty('storepwd')
//                    keyPassword project.findProperty('storepwd')
//                }
//            }
            storeFile file("TestKey.jks")
            storePassword "123321"

            keyAlias "Test"
            keyPassword "123321"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig = signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            kotlinOptions.freeCompilerArgs = ['-Xno-param-assertions']
        }
        signedRelease {
            initWith release
            signingConfig = signingConfigs.release
            matchingFallbacks = ['release']
        }
        debug {
            signingConfig = signingConfigs.release
            applicationIdSuffix ".debug"
            jniDebuggable true
        }
        dev {
            signingConfig = signingConfigs.release
            initWith debug
            matchingFallbacks = ['debug']
        }
    }

    sourceSets.release {
        manifest.srcFile 'flavors/release/AndroidManifest.xml'
    }
    sourceSets.signedRelease {
        manifest.srcFile 'flavors/release/AndroidManifest.xml'
    }

    splits {
        abi {
//            def isReleaseBuild = false
//            gradle.startParameter.taskNames.find {
//                // Enable split for release builds in different build flavors
//                // (assemblePaidRelease, assembleFreeRelease, etc.).
//                if (it.toLowerCase() ==~ /assemble.*Release/.toLowerCase()) {
//                    isReleaseBuild = true
//                    return true // break
//                }
//                return false // continue
//            }
//            enable isReleaseBuild
//            reset()
//            include "x86", "x86_64", "armeabi-v7a", "arm64-v8a"
//            //universalApk !isReleaseBuild

            enable true
            reset()
            //只打出以下两个包
            include "x86", "arm64-v8a"
            //是否打出一个全量的包
            universalApk false

        }

    }

    def abiCodes = ['x86': 5, 'x86_64': 8, 'armeabi-v7a': 4, 'arm64-v8a': 7]
    // make per-variant version code
    applicationVariants.all { variant ->
        //Custom APK name and versionCode
        variant.outputs.each { output ->
            def outputAbi = output.getFilter(com.android.build.OutputFile.ABI)
//            def abiName = System.getenv('GRADLE_ABI')?.toLowerCase() ?: "all"
            def abiName = "arm64-v8a"
            if (outputAbi != null) abiName = outputAbi
            output.versionCodeOverride = 10000000 + defaultConfig.versionCode + abiCodes.get(abiName, 0)
            def outputName = "VLC-Android-"
            outputName += variant.versionName + "-" + abiName + ".apk"
            output.outputFileName = outputName
        }
    }

}

dependencies {
    implementation project(':application:vlc-android')
    implementation project(':application:television')
}
